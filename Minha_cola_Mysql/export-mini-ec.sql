-- MySQL Script generated by MySQL Workbench
-- Fri Dec 29 09:41:27 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
SHOW WARNINGS;
-- -----------------------------------------------------
-- Schema mini_ec
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mini_ec` ;

-- -----------------------------------------------------
-- Schema mini_ec
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mini_ec` DEFAULT CHARACTER SET utf8 ;
SHOW WARNINGS;
USE `mini_ec` ;

-- -----------------------------------------------------
-- Table `categorias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `categorias` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `categorias` (
  `id_categoria` INT(11) NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id_categoria`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `fabricantes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `fabricantes` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `fabricantes` (
  `id_fabricante` INT(11) NOT NULL AUTO_INCREMENT,
  `nome_fabricante` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id_fabricante`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `produto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `produto` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `produto` (
  `id_produto` INT(11) NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(100) NOT NULL,
  `id_categoria` INT(11) NOT NULL,
  `id_fabricante` INT(11) NOT NULL,
  `preco_custo` DECIMAL(10,2) NULL DEFAULT NULL,
  `preco_venda` DECIMAL(10,2) NULL DEFAULT NULL,
  PRIMARY KEY (`id_produto`))
ENGINE = InnoDB
AUTO_INCREMENT = 13
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `carrinho_compras`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `carrinho_compras` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `carrinho_compras` (
  `sessao` VARCHAR(32) NOT NULL,
  `id_produto` INT(11) NOT NULL,
  `qtd` INT(11) NOT NULL,
  `val_unit` DECIMAL(10,2) NOT NULL,
  `desconto` DECIMAL(10,2) NOT NULL,
  `total` DECIMAL(10,2) NOT NULL,
  `data_hora_sessa` DATETIME NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;
CREATE INDEX `ix_cc_1` ON `carrinho_compras` (`sessao` ASC);

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `unidade_federal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `unidade_federal` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `unidade_federal` (
  `cod_uf` TINYINT(4) NOT NULL,
  `uf` CHAR(2) NOT NULL,
  `nome_uf` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`cod_uf`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `cidades`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cidades` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `cidades` (
  `id_cidade` INT(11) NOT NULL AUTO_INCREMENT,
  `nome_cidade` VARCHAR(70) NOT NULL,
  `cod_mun` CHAR(7) NOT NULL,
  `cod_uf` TINYINT(2) NOT NULL,
  PRIMARY KEY (`id_cidade`))
ENGINE = InnoDB
AUTO_INCREMENT = 8194
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `clientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `clientes` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `clientes` (
  `id_cliente` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(32) NOT NULL,
  `sobrenome` VARCHAR(32) NOT NULL,
  `email` VARCHAR(60) NOT NULL,
  `senha` VARCHAR(32) NOT NULL,
  `data_nasc` DATE NOT NULL,
  `data_cadastro` DATETIME NOT NULL,
  `ult_acesso` DATETIME NULL DEFAULT NULL,
  `ult_compra` DATETIME NULL DEFAULT NULL,
  `situacao` ENUM('A', 'B') NOT NULL,
  PRIMARY KEY (`id_cliente`))
ENGINE = InnoDB
AUTO_INCREMENT = 32
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `cliente_endereco`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cliente_endereco` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `cliente_endereco` (
  `id_endereco` INT(11) NOT NULL AUTO_INCREMENT,
  `id_cliente` INT(11) NOT NULL,
  `tipo` ENUM('P', 'A') NOT NULL,
  `endereco` VARCHAR(60) NOT NULL,
  `numero` VARCHAR(10) NOT NULL,
  `bairro` VARCHAR(30) NOT NULL,
  `cep` VARCHAR(8) NOT NULL,
  `id_cidade` INT(11) NOT NULL,
  PRIMARY KEY (`id_endereco`))
ENGINE = InnoDB
AUTO_INCREMENT = 21
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `cond_pagto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cond_pagto` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `cond_pagto` (
  `id_pagto` INT(11) NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(50) NOT NULL,
  `tipo` ENUM('C', 'D', 'B') NOT NULL,
  PRIMARY KEY (`id_pagto`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `cond_pagto_det`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cond_pagto_det` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `cond_pagto_det` (
  `id_pagto` INT(11) NOT NULL,
  `parcela` INT(11) NOT NULL,
  `percentual` DECIMAL(10,2) NOT NULL,
  `dias` INT(11) NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `estoque`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estoque` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `estoque` (
  `id_produto` INT(11) NOT NULL,
  `estoque_total` INT(11) NOT NULL,
  `estoque_livre` INT(11) NULL DEFAULT NULL,
  `estoque_reservado` INT(11) NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `pedidos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pedidos` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `pedidos` (
  `num_pedido` INT(11) NOT NULL AUTO_INCREMENT,
  `id_cliente` INT(11) NOT NULL,
  `id_endereco` INT(11) NOT NULL,
  `id_pagto` INT(11) NOT NULL,
  `total_prod` DECIMAL(10,2) NULL DEFAULT NULL,
  `total_frete` DECIMAL(10,2) NULL DEFAULT NULL,
  `total_desc` DECIMAL(10,2) NULL DEFAULT NULL,
  `total_pedido` DECIMAL(10,2) NULL DEFAULT NULL,
  `data_pedido` DATETIME NOT NULL,
  `previsao_entrega` DATE NULL DEFAULT NULL,
  `efetiva_entrega` DATE NULL DEFAULT NULL,
  `status_ped` ENUM('A', 'S', 'F', 'T', 'E') NULL DEFAULT NULL,
  PRIMARY KEY (`num_pedido`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `nota_fiscal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `nota_fiscal` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `nota_fiscal` (
  `num_nota` INT(11) NOT NULL AUTO_INCREMENT,
  `num_ped_ref` INT(11) NOT NULL,
  `id_cliente` INT(11) NOT NULL,
  `id_endereco` INT(11) NOT NULL,
  `id_pagto` INT(11) NOT NULL,
  `total_prod` DECIMAL(10,2) NULL DEFAULT NULL,
  `total_frete` DECIMAL(10,2) NULL DEFAULT NULL,
  `total_desc` DECIMAL(10,2) NULL DEFAULT NULL,
  `total_nf` DECIMAL(10,2) NULL DEFAULT NULL,
  `data_nf` DATETIME NOT NULL,
  `status_nf` ENUM('N', 'C', 'D') NULL DEFAULT NULL,
  `id_user` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`num_nota`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `nf_itens`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `nf_itens` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `nf_itens` (
  `num_nota` INT(11) NOT NULL,
  `id_produto` INT(11) NOT NULL,
  `qtd` INT(11) NOT NULL,
  `val_unit` DECIMAL(10,2) NOT NULL,
  `desconto` DECIMAL(10,2) NOT NULL,
  `total` DECIMAL(10,2) NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `nf_obs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `nf_obs` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `nf_obs` (
  `num_nota` INT(11) NOT NULL,
  `obs` VARCHAR(255) NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `pedido_itens`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pedido_itens` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `pedido_itens` (
  `num_pedido` INT(11) NOT NULL,
  `id_produto` INT(11) NOT NULL,
  `qtd` INT(11) NOT NULL,
  `val_unit` DECIMAL(10,2) NOT NULL,
  `desconto` DECIMAL(10,2) NOT NULL,
  `total` DECIMAL(10,2) NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `pedido_obs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pedido_obs` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `pedido_obs` (
  `num_pedido` INT(11) NOT NULL,
  `obs` VARCHAR(255) NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `produto_caracter`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `produto_caracter` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `produto_caracter` (
  `id_produto` INT(11) NOT NULL,
  `caracteristica` VARCHAR(50) NOT NULL,
  `valor` VARCHAR(50) NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `rastreabilidade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rastreabilidade` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `rastreabilidade` (
  `num_pedido` INT(11) NOT NULL,
  `status_ped` CHAR(1) NOT NULL,
  `data_hora` DATETIME NOT NULL,
  `id_user` VARCHAR(50) NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `usuarios` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `usuarios` (
  `id_user` INT(11) NOT NULL AUTO_INCREMENT,
  `nome_user` VARCHAR(50) NOT NULL,
  `email_user` VARCHAR(60) NOT NULL,
  `senha` VARCHAR(32) NOT NULL,
  `data_cadastro` DATETIME NOT NULL,
  `status` ENUM('A', 'B') NULL DEFAULT NULL,
  PRIMARY KEY (`id_user`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;
CREATE UNIQUE INDEX `ix_usr_1` ON `usuarios` (`email_user` ASC);

SHOW WARNINGS;
USE `mini_ec` ;

-- -----------------------------------------------------
-- procedure proc_carga_carrinho
-- -----------------------------------------------------

USE `mini_ec`;
DROP procedure IF EXISTS `proc_carga_carrinho`;
SHOW WARNINGS;

DELIMITER $$
USE `mini_ec`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_carga_carrinho`(v_sessao varchar(32),
                                      v_id_prod int,
                                      v_qtd int,
                                      OUT resposta VARCHAR(50))
main: begin
        DECLARE v_qtd_livre int;
        DECLARE v_preco_venda decimal(10,2);
        DECLARE cod_erro CHAR(5) DEFAULT '00000';
	     DECLARE msg TEXT;
	     DECLARE rows INT;
	     DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    	BEGIN
	      GET DIAGNOSTICS CONDITION 1
	      cod_erro = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
      END;
		
    
    -- Lendo qtd no estoque e atribuindo a variavel
    select estoque_Livre into v_qtd_livre from estoque
    where id_produto=v_id_prod;
    
    select v_qtd_livre;
    -- verificando se existe saldo disponivel
    IF v_qtd>v_qtd_livre then
    	SET resposta='Quantidade Indisponivel';
    LEAVE main;
	END IF;
    
    -- pegando preco de venda
    select preco_venda into v_preco_venda from produto
    where id_produto=v_id_prod;
    -- carga no carrinho de compras
    -- inicia transacao
    START TRANSACTION;
    -- carregando carrinhos
    insert into carrinho_compras values 
      (md5(v_sessao),v_id_prod,v_qtd,v_preco_venda,0,v_qtd*v_preco_venda,now());
	
    -- atualizando disponibilidade estoque
   update estoque set estoque_livre=estoque_livre-v_qtd,
                      estoque_reservado=estoque_reservado+v_qtd
	where id_produto=v_id_prod;
    
-- checando excessao com IF

 IF cod_erro = '00000' THEN
    	  GET DIAGNOSTICS rows = ROW_COUNT;
		  SET resposta = CONCAT('Atualizacao com Sucesso  = ',rows);
          commit;
	ELSE
		SET resposta = CONCAT('Erro na atualizacao, error = ',cod_erro,', message = ',msg);
        rollback;
  END IF;
	
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure proc_fat_pedido
-- -----------------------------------------------------

USE `mini_ec`;
DROP procedure IF EXISTS `proc_fat_pedido`;
SHOW WARNINGS;

DELIMITER $$
USE `mini_ec`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_fat_pedido`(v_num_ped int,
								          OUT resposta VARCHAR(255))
main: begin
        DECLARE cod_erro CHAR(5) DEFAULT '00000';
	     DECLARE msg TEXT;
        DECLARE v_num_nf int;
        DECLARE v_qtd int;
        DECLARE v_id_prod int;
	     DECLARE rows INT;
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, 
 		@nroerro = MYSQL_ERRNO, @msgerro = MESSAGE_TEXT;
		SET @msg_erro_completa = CONCAT("ERRO: ", @nroerro, " (", @sqlstate, "): ", @msgerro);
		SELECT @msg_erro_completa;
  END; 

  IF (select count(*) from pedidos where num_pedido=v_num_ped 
  and status_ped in ('F','T','E'))>0 then
  SET resposta='Pedido Ja Faturado';
		LEAVE main;
  END IF;
	-- inicia a transacao
    START TRANSACTION;
    
    -- lendo pedido e inserindo nfe
    insert into nota_fiscal (num_ped_ref,id_cliente,id_endereco,id_pagto,
                             total_prod,total_frete,total_desc,total_nf,
                             data_nf,status_nf,id_user)
    select num_pedido,id_cliente,id_endereco,id_pagto,total_prod,total_frete,
           total_desc,total_pedido,now(),'N',user()
    from pedidos
    where num_pedido=v_num_ped;
    -- pegando numero da nfe
    set v_num_nf=LAST_INSERT_ID();
    
    -- lendo pedido itens e inserindo nota itens
    
      insert into nf_itens
      (num_nota,id_produto,qtd,val_unit,desconto,total)
      select v_num_nf,id_produto,qtd,val_unit,desconto,total
      from pedido_itens
      where num_pedido=v_num_ped;
    
    -- Atualizando status ped
      UPDATE PEDIDOS SET status_ped='F'
	   where num_pedido=v_num_ped;
      
-- atualizando estoque
	-- atualizando estoque,
 
	UPDATE estoque
        INNER JOIN
    pedido_itens 
	    ON estoque.id_produto = pedido_itens.id_produto 
SET estoque.estoque_total = estoque.estoque_total - pedido_itens.qtd,
    estoque.estoque_reservado = estoque.estoque_reservado - pedido_itens.qtd
WHERE
    pedido_itens.num_pedido = v_num_ped;
    
-- checando excessao com IF

 IF cod_erro = '00000' THEN
    	  GET DIAGNOSTICS rows = ROW_COUNT;
		  SET resposta = CONCAT('Atualizacao com Sucesso  = ',rows);
          commit;
	ELSE
		SET resposta = CONCAT('Erro na atualizacao, error = ',rows,cod_erro,', message = ',msg);
        rollback;
  END IF;
   
  select concat('resposta ',resposta)
  union all
  SELECT concat('cod_erro ',cod_erro);
	
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure proc_fecha_carrinho
-- -----------------------------------------------------

USE `mini_ec`;
DROP procedure IF EXISTS `proc_fecha_carrinho`;
SHOW WARNINGS;

DELIMITER $$
USE `mini_ec`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_fecha_carrinho`(v_sessao varchar(32),
                                      v_id_cliente int,
                                      v_id_pagto int,
                                      v_frete decimal(10,2), 
                                      v_ender char(1), -- P principal -- A alternativo
                                      OUT resposta VARCHAR(255))
main: begin
        DECLARE v_total_ped decimal(10,2);
        DECLARE v_total_desc decimal(10,2);
		  DECLARE v_num_ped int;
        DECLARE v_id_endereco int;
        DECLARE cod_erro CHAR(5) DEFAULT '00000';
	     DECLARE msg TEXT;
	     DECLARE rows INT;
	     DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    	BEGIN
		GET DIAGNOSTICS CONDITION 1
	      cod_erro = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
		END;
		
    
    -- Peganto tatol carrinho atribuindo a variavel
    select sum(total)as tot,sum(desconto) as descto into v_total_ped,v_total_desc
    from carrinho_compras
    where sessao=MD5(v_sessao);
    
    
    -- pegando emdereço cliente
    select id_endereco into v_id_endereco from cliente_endereco
    where id_cliente=v_id_cliente limit 1;
    -- carga no carrinho de compras
    -- inicia transacao
    START TRANSACTION;
    
     insert into pedidos 
     (id_cliente,id_endereco,id_pagto,total_prod,
                         total_frete,total_desc,total_pedido,data_pedido,status_ped)
				values 
      (v_id_cliente,v_id_endereco,v_id_pagto,v_total_ped,v_frete,v_total_desc,
              ((v_total_ped+v_frete)-v_total_desc),now(),'A');
              
	  -- pegando id do pedido
      set v_num_ped=LAST_INSERT_ID();
      -- inserindo pedido itens
      insert into pedido_itens
      (num_pedido,id_produto,qtd,val_unit,desconto,total)
      select v_num_ped,id_produto,qtd,val_unit,desconto,total
      from carrinho_compras
      where sessao=MD5(v_sessao);
      -- eliminando itens do carrinho
      delete from carrinho_compras
      where sessao=MD5(v_sessao);  

-- checando excessao com IF

 IF cod_erro = '00000' THEN
    	  GET DIAGNOSTICS rows = ROW_COUNT;
		  SET resposta = CONCAT('Atualizacao com Sucesso  = ',rows);
          commit;
	ELSE
		SET resposta = CONCAT('Erro na atualizacao, error = ',rows,cod_erro,', message = ',msg);
        rollback;
  END IF;
  /*
  select concat('resposta ',resposta)
  union all
  SELECT concat('cod_erro ',cod_erro)
  union all
  SELECT concat('v_total_ped ',v_total_ped) 
  union all
  SELECT concat('v_total_desc ',v_total_desc)
  union all
  SELECT concat('v_num_ped ',v_num_ped)
  union all
  SELECT concat('v_id_endereco ',v_id_endereco);
*/	
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- View `v_financeiro`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `v_financeiro` ;
SHOW WARNINGS;
USE `mini_ec`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_financeiro` AS select `a`.`num_nota` AS `num_nota`,`a`.`id_cliente` AS `id_cliente`,`d`.`nome` AS `nome`,`a`.`id_pagto` AS `id_pagto`,`b`.`descricao` AS `descricao`,`b`.`tipo` AS `tipo`,`a`.`total_nf` AS `total_nf`,`a`.`data_nf` AS `data_nf`,`c`.`parcela` AS `parcela`,`c`.`percentual` AS `percentual`,`c`.`dias` AS `dias`,cast(((`a`.`total_nf` / 100) * `c`.`percentual`) as decimal(10,2)) AS `valor_parcela`,cast((`a`.`data_nf` + interval `c`.`dias` day) as date) AS `vencimento` from (((`nota_fiscal` `a` join `cond_pagto` `b` on((`a`.`id_pagto` = `b`.`id_pagto`))) join `cond_pagto_det` `c` on(((`a`.`id_pagto` = `b`.`id_pagto`) and (`a`.`id_pagto` = `c`.`id_pagto`)))) join `clientes` `d` on((`a`.`id_cliente` = `d`.`id_cliente`))) where (`a`.`status_nf` = 'N');
SHOW WARNINGS;
USE `mini_ec`;

DELIMITER $$

USE `mini_ec`$$
DROP TRIGGER IF EXISTS `Tgr_insert_status_ped` $$
SHOW WARNINGS$$
USE `mini_ec`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mini_ec`.`Tgr_insert_status_ped`
AFTER INSERT ON `mini_ec`.`pedidos`
FOR EACH ROW
BEGIN
	insert into rastreabilidade values (new.num_pedido,new.status_ped,now(),user());
END$$

SHOW WARNINGS$$

USE `mini_ec`$$
DROP TRIGGER IF EXISTS `Tgr_update_status_ped` $$
SHOW WARNINGS$$
USE `mini_ec`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mini_ec`.`Tgr_update_status_ped`
AFTER UPDATE ON `mini_ec`.`pedidos`
FOR EACH ROW
BEGIN
	insert into rastreabilidade values (new.num_pedido,new.status_ped,now(),user());
END$$

SHOW WARNINGS$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
