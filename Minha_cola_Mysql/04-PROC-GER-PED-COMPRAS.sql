--PROCEDURE GERA PEDIDO DE COMPRAS
--PROCEDURE PARA CRIAR PEDIDO DE COMPRAS COM BASE NECESSIDADES DA ORDEM DE PRODUCAO
--PARAMETROS @MES @ANO
--TABELAS ORIGEM  ORDEM_PROD
--TABELAS NECESSARIAS, FICHA_TECNICA, MATERIAL, FORNECEDORES
--TABELAS DESTINO PED_COMPRAS, PED_COMPRAS_ITEM
--TABELAS ATUALIZADA ORDEM_PROD SITUACAO DE A ABERTA PARA P PLANEJ
--DROP PROCEDURE PROC_GER_PED_COMPRAS
--EXEC PROC_GER_PED_COMPRAS 05,2017
CREATE PROCEDURE PROC_GER_PED_COMPRAS (@MES VARCHAR(2), 
                                       @ANO  VARCHAR(4)) 
AS 
 BEGIN 
 --DECLARANDO TABELA TEMP 
DECLARE @PED_AUX TABLE
(
    NUM_PEDIDO_AUX  INT
)
DECLARE @RETORNO TABLE
(
	RET_ORD INT,
	RET_SIT VARCHAR(1)
)
--DECLARANDO VARIAVEIS
DECLARE    	@MES_AUX VARCHAR(2),
			@ANO_AUX VARCHAR(4),
			@NUM_PEDIDO INT,
			@ID_ORDEM INT,
			@NUM_PEDIDO_AUX INT,
			@COD_MAT INT,
			@ID_FOR INT ,
			@COD_PAGTO INT,
			@DATA_PEDIDO DATE,
			@DATA_ENTREGA DATE ,
			@SITUACAO VARCHAR(1),
			@QTD DECIMAL(10,2),
			@PRECO_UNIT DECIMAL (10,2),
			@CONT_SEQ INT,
			@TOTAL_PED DECIMAL(10,2),
			@ErrorState INT
--SET @MES='01'
--SET @ANO='2017'
--VERIFICACAO SE MES JANEIRO MES=12 E ANO-1
--SENAO MES-1

SET @TOTAL_PED=0;

BEGIN TRANSACTION
  IF (@MES='01')
	BEGIN
		SET @MES_AUX=12;
		SET @ANO_AUX=@ANO-1;
	END
		ELSE
	BEGIN  
	  SET @MES_AUX=@MES_AUX-1;
    END
--VERIFICANDO SE EXISTEM ORDEM PARA PLANEJ
   IF (SELECT COUNT(*) FROM ORDEM_PROD A
        WHERE MONTH(A.DATA_INI)=@MES
		AND YEAR(A.DATA_INI)=@ANO
		AND A.SITUACAO='A')=0
	BEGIN
	SET @ErrorState=1 
	END
    ELSE IF (SELECT COUNT(*) FROM ORDEM_PROD A
        WHERE MONTH(A.DATA_INI)=@MES
		AND YEAR(A.DATA_INI)=@ANO
		AND A.SITUACAO='A')>0
	BEGIN
	 
	SET @MES_AUX=@MES
	SET @ANO_AUX=@ANO
	SET @CONT_SEQ=1
	SET @NUM_PEDIDO=0
	SET @NUM_PEDIDO_AUX=0;


--CURSOR PARA GRAVAR CABECALHO PEDIDO DE COMPRAS
--SELECT PARA GERAR NECESSIDADES DE COMPRAS CONFORME ORDEM DE PRODUCAO
--CONFORME FICHA TENICA  E PRODUTO COM SEU FORNECEDOR
DECLARE PED_COMP CURSOR FOR
SELECT distinct C.ID_FOR,D.COD_PAGTO,
      CAST('15-'+@MES_AUX+'-'+@ANO_AUX AS DATE) AS DATA_PEDIDO,
      CAST('15-'+@MES+'-'+@ANO AS DATE)  DATA_ENTREGA,
	'A' SITUACAO
	FROM ORDEM_PROD A
	INNER JOIN FICHA_TECNICA B
	ON A.COD_MAT_PROD=B.COD_MAT_PROD
	INNER JOIN MATERIAL C
	ON B.COD_MAT_NECES=C.COD_MAT
	INNER JOIN FORNECEDORES D
	ON C.ID_FOR=D.ID_FOR
	WHERE MONTH(A.DATA_INI)=@MES
	AND YEAR(A.DATA_INI)=@ANO
	AND A.SITUACAO='A'
OPEN PED_COMP
FETCH NEXT FROM PED_COMP
	INTO @ID_FOR,@COD_PAGTO,@DATA_PEDIDO,@DATA_ENTREGA,@SITUACAO

WHILE @@FETCH_STATUS = 0
	BEGIN
	--PARA TESTE VARIAVEL
	--SET @NUM_PEDIDO_AUX=@NUM_PEDIDO_AUX+1
	--INSERT NA TABELA COMPRAS CABEBECALHO
	
	INSERT INTO PED_COMPRAS (ID_FOR,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO)
	OUTPUT INSERTED.NUM_PEDIDO INTO @PED_AUX --PEGANDO VALOR DO PEDIDO INSERIDO
	 VALUES (@ID_FOR,@COD_PAGTO,@DATA_PEDIDO,@DATA_ENTREGA,@SITUACAO);
	 
	--ATRIBUINDO VALOR
	SELECT @NUM_PEDIDO_AUX=NUM_PEDIDO_AUX FROM @PED_AUX;
	--APRESENTANDO VALORES
	SELECT @NUM_PEDIDO_AUX NUM_PEDIDO_AUX,@ID_FOR ID_FOR,@COD_PAGTO COD_PAGTO,
	@DATA_PEDIDO DATA_PEDIDO,@DATA_ENTREGA DATA_ENTREGA,@SITUACAO SITUACAO;

	--CURSOR DETALHE PED INICIO
	DECLARE PED_COMP_IT CURSOR FOR 
	--SELECT COM PARAMETROS
    SELECT B.COD_MAT_NECES COD_MAT,C.ID_FOR,
       SUM(B.QTD_NECES*A.QTD_PLAN) QTD,C.PRECO_UNIT
		FROM ORDEM_PROD A
		INNER JOIN FICHA_TECNICA B
		ON A.COD_MAT_PROD=B.COD_MAT_PROD
		INNER JOIN MATERIAL C
		ON B.COD_MAT_NECES=C.COD_MAT
		INNER JOIN FORNECEDORES D
		ON C.ID_FOR=D.ID_FOR
		WHERE MONTH(A.DATA_INI)=@MES
		AND YEAR(A.DATA_INI)=@ANO
		AND A.SITUACAO='A' --ABERTA
		AND C.ID_FOR=@ID_FOR
		GROUP BY B.COD_MAT_NECES,C.ID_FOR,C.PRECO_UNIT
--ABRINDO CURSOR
OPEN PED_COMP_IT
--LENDO REGISTROS
FETCH NEXT FROM PED_COMP_IT
--INSERINDO VALORES
INTO  @COD_MAT,@ID_FOR,@QTD,@PRECO_UNIT
--INICIO WHILE
WHILE @@FETCH_STATUS = 0
	BEGIN
	  --VERIFICACOES PARA CONTADOR DE SEQ MATERIAL E TOTAL_PED
	  IF (@NUM_PEDIDO<>@NUM_PEDIDO_AUX)
	BEGIN 
	  SET @CONT_SEQ=1;
	  SET @TOTAL_PED=0;  
	END
	    --INSERINDO REGISTRO NA PED_COMPRAS_ITENS
		
		INSERT INTO PED_COMPRAS_ITENS VALUES 
		(@NUM_PEDIDO_AUX,@CONT_SEQ,@COD_MAT,@QTD,@PRECO_UNIT);
		--APRESENTANDO VALORES
		select @NUM_PEDIDO_AUX NUM_PEDIDO_AUX,@CONT_SEQ CONT_SEQ,
		      @COD_MAT COD_MAT,@QTD QTD,@PRECO_UNIT PRECO_UNIT;
		--ATRIBUINDO VALORES
		
		SET @NUM_PEDIDO=@NUM_PEDIDO_AUX;
		SET @CONT_SEQ=@CONT_SEQ+1;
		SET @TOTAL_PED=@TOTAL_PED+(@QTD*@PRECO_UNIT);

		--LENDO PROXIMA LINHA DO CURSOR
		FETCH NEXT FROM PED_COMP_IT	   
        INTO  @COD_MAT,@ID_FOR,@QTD,@PRECO_UNIT
	   
END 
CLOSE PED_COMP_IT
DEALLOCATE PED_COMP_IT
  
  SELECT @TOTAL_PED
  --ATUALIZANDO TOTAL PEDIDO
  UPDATE PED_COMPRAS SET TOTAL_PED=@TOTAL_PED
  WHERE NUM_PEDIDO=@NUM_PEDIDO;

--CURSO DETALHE PED FIM
--LENDO PROXIMA LINHA DO CURSOR PED_COMP
	FETCH NEXT FROM PED_COMP
    INTO @ID_FOR,@COD_PAGTO,@DATA_PEDIDO,@DATA_ENTREGA,@SITUACAO;
   PRINT @NUM_PEDIDO_AUX;
   SET @NUM_PEDIDO=@NUM_PEDIDO_AUX;
 
END   

CLOSE PED_COMP
DEALLOCATE PED_COMP	
END
  --VALIDACOES FINAIS
	IF @@ERROR <>0
	 BEGIN 
		ROLLBACK 
		PRINT 'OPERACAO CANCELADA'
	END
	ELSE IF @ErrorState=1
	 BEGIN 
		ROLLBACK 
		PRINT 'ORDEM NAO EXISTE OU NAO ABERTA'
	 END
	 ELSE
		BEGIN
		    --ATUALIZANDO STATUS DA ORDEM PARA NAO GERAR MAIS DEMANDAS DE COMPRAS
		
			UPDATE  ORDEM_PROD SET SITUACAO='P'
			OUTPUT INSERTED.ID_ORDEM,INSERTED.SITUACAO INTO @RETORNO
			WHERE MONTH(DATA_INI)=@MES
			AND YEAR(DATA_INI)=@ANO
			AND SITUACAO='A';
		    SELECT * FROM @RETORNO
		
		    PRINT 'OPERACAO FINALIZADA COM SUCESSO'
			COMMIT
		END
END
